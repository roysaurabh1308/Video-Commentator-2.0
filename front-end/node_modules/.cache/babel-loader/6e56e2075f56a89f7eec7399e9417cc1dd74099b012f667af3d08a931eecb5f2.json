{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/video-captioning-frontend/src/VideoUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VideoUpload() {\n  _s();\n  const [caption, setCaption] = useState(''); // State to hold the caption\n\n  function handleUpload(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n    const chunkSize = 2 * 1024 * 1024; // 2MB\n    const totalChunks = Math.ceil(file.size / chunkSize);\n    let chunkIndex = 0;\n    const uploadChunk = chunk => {\n      const formData = new FormData();\n      formData.append('file', chunk);\n      formData.append('index', chunkIndex);\n      fetch('http://localhost:5000/upload-chunk', {\n        method: 'POST',\n        body: formData\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        return response.json().catch(err => {\n          throw new Error('Invalid JSON: ' + err.message);\n        });\n      }).then(data => {\n        console.log('Chunk upload successful', data);\n        chunkIndex++;\n        if (chunkIndex < totalChunks) {\n          const start = chunkIndex * chunkSize;\n          const end = Math.min(file.size, start + chunkSize);\n          const nextChunk = file.slice(start, end);\n          uploadChunk(nextChunk);\n        } else {\n          setCaption('All chunks uploaded successfully.');\n        }\n      }).catch(error => {\n        console.error('Error uploading chunk:', error);\n        setCaption('Failed to upload chunks.');\n      });\n    };\n\n    // Start uploading the first chunk\n    const start = chunkIndex * chunkSize;\n    const end = Math.min(file.size, start + chunkSize);\n    const firstChunk = file.slice(start, end);\n    uploadChunk(firstChunk);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/*\",\n      onChange: handleUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), caption && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"caption\",\n      children: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }, this), \"  // Display the caption\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(VideoUpload, \"fHZ07goTCgsHLhpi1L8y2qqvFZg=\");\n_c = VideoUpload;\nexport default VideoUpload;\nvar _c;\n$RefreshReg$(_c, \"VideoUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","VideoUpload","_s","caption","setCaption","handleUpload","event","file","target","files","chunkSize","totalChunks","Math","ceil","size","chunkIndex","uploadChunk","chunk","formData","FormData","append","fetch","method","body","then","response","ok","Error","statusText","json","catch","err","message","data","console","log","start","end","min","nextChunk","slice","error","firstChunk","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","className","_c","$RefreshReg$"],"sources":["/home/user/Desktop/video-captioning-frontend/src/VideoUpload.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction VideoUpload() {\n  const [caption, setCaption] = useState('');  // State to hold the caption\n\n  function handleUpload(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const chunkSize = 2 * 1024 * 1024;  // 2MB\n    const totalChunks = Math.ceil(file.size / chunkSize);\n    let chunkIndex = 0;\n\n    const uploadChunk = (chunk) => {\n      const formData = new FormData();\n      formData.append('file', chunk);\n      formData.append('index', chunkIndex);\n\n      fetch('http://localhost:5000/upload-chunk', {\n        method: 'POST',\n        body: formData,\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        return response.json().catch(err => {\n          throw new Error('Invalid JSON: ' + err.message);\n        });\n      })\n      .then(data => {\n        console.log('Chunk upload successful', data);\n        chunkIndex++;\n        if (chunkIndex < totalChunks) {\n          const start = chunkIndex * chunkSize;\n          const end = Math.min(file.size, start + chunkSize);\n          const nextChunk = file.slice(start, end);\n          uploadChunk(nextChunk);\n        } else {\n          setCaption('All chunks uploaded successfully.');\n        }\n      })\n      .catch(error => {\n        console.error('Error uploading chunk:', error);\n        setCaption('Failed to upload chunks.');\n      });\n    };\n\n    // Start uploading the first chunk\n    const start = chunkIndex * chunkSize;\n    const end = Math.min(file.size, start + chunkSize);\n    const firstChunk = file.slice(start, end);\n    uploadChunk(firstChunk);\n  }\n\n  return (\n    <div>\n      <h1>Upload Video</h1>\n      <input type=\"file\" accept=\"video/*\" onChange={handleUpload} />\n      {caption && <div className=\"caption\">{caption}</div>}  // Display the caption\n    </div>\n  );\n}\n\nexport default VideoUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}