{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/video-captioning-frontend/src/VideoUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VideoUpload() {\n  _s();\n  const [caption, setCaption] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  function handleUpload(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n    const chunkSize = 2 * 1024 * 1024; // 4MB\n\n    const totalChunks = Math.ceil(file.size / chunkSize);\n    let chunkIndex = 0;\n    const uploadChunk = chunk => {\n      const formData = new FormData();\n      formData.append('file', chunk);\n      formData.append('index', chunkIndex);\n      formData.append('filename', file.name);\n      console.log(`Uploading chunk ${chunkIndex + 1}/${totalChunks}`);\n      fetch('http://localhost:5000/upload-chunk', {\n        method: 'POST',\n        body: formData\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        return response.json().catch(err => {\n          throw new Error('Invalid JSON: ' + err.message);\n        });\n      }).then(data => {\n        console.log('Chunk upload successful', data);\n        chunkIndex++;\n        setProgress(chunkIndex / totalChunks * 100);\n        if (chunkIndex < totalChunks) {\n          const start = chunkIndex * chunkSize;\n          const end = Math.min(file.size, start + chunkSize);\n          const nextChunk = file.slice(start, end);\n          uploadChunk(nextChunk);\n        } else {\n          setCaption('All chunks uploaded successfully.');\n          setUploading(false);\n          // Notify the server to reassemble the chunks\n          fetch('http://localhost:5000/reassemble-video', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              filename: file.name\n            })\n          }).then(response => {\n            if (!response.ok) {\n              throw new Error('Network response was not ok ' + response.statusText);\n            }\n            return response.json().catch(err => {\n              throw new Error('Invalid JSON: ' + err.message);\n            });\n          }).then(data => {\n            console.log('Reassembly successful', data);\n            setCaption('Video reassembled successfully.');\n          }).catch(error => {\n            console.error('Error reassembling video:', error);\n            setCaption('Failed to reassemble video.');\n          });\n        }\n      }).catch(error => {\n        console.error('Error uploading chunk:', error);\n        setCaption('Failed to upload chunks.');\n        setUploading(false);\n      });\n    };\n    console.log(\"Called\");\n    // Start uploading the first chunk\n    setUploading(true);\n    const start = chunkIndex * chunkSize;\n    const end = Math.min(file.size, start + chunkSize);\n    const firstChunk = file.slice(start, end);\n    uploadChunk(firstChunk);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/*\",\n      onChange: handleUpload,\n      disabled: uploading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), uploading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Uploading: \", progress.toFixed(2), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }, this), caption && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"caption\",\n      children: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(VideoUpload, \"/h112ymGHskMrAnj1g9FPujsOBY=\");\n_c = VideoUpload;\nexport default VideoUpload;\nvar _c;\n$RefreshReg$(_c, \"VideoUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","VideoUpload","_s","caption","setCaption","uploading","setUploading","progress","setProgress","handleUpload","event","file","target","files","chunkSize","totalChunks","Math","ceil","size","chunkIndex","uploadChunk","chunk","formData","FormData","append","name","console","log","fetch","method","body","then","response","ok","Error","statusText","json","catch","err","message","data","start","end","min","nextChunk","slice","headers","JSON","stringify","filename","error","firstChunk","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","disabled","toFixed","className","_c","$RefreshReg$"],"sources":["/home/user/Desktop/video-captioning-frontend/src/VideoUpload.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction VideoUpload() {\n  const [caption, setCaption] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  function handleUpload(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    const chunkSize = 2 * 1024 * 1024;  // 4MB\n\n    const totalChunks = Math.ceil(file.size / chunkSize);\n    let chunkIndex = 0;\n\n    const uploadChunk = (chunk) => {\n      const formData = new FormData();\n      formData.append('file', chunk);\n      formData.append('index', chunkIndex);\n      formData.append('filename', file.name);\n\n      console.log(`Uploading chunk ${chunkIndex + 1}/${totalChunks}`);\n\n      fetch('http://localhost:5000/upload-chunk', {\n        method: 'POST',\n        body: formData,\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        return response.json().catch(err => {\n          throw new Error('Invalid JSON: ' + err.message);\n        });\n      })\n      .then(data => {\n        console.log('Chunk upload successful', data);\n        chunkIndex++;\n        setProgress((chunkIndex / totalChunks) * 100);\n        if (chunkIndex < totalChunks) {\n          const start = chunkIndex * chunkSize;\n          const end = Math.min(file.size, start + chunkSize);\n          const nextChunk = file.slice(start, end);\n          uploadChunk(nextChunk);\n        } else {\n          setCaption('All chunks uploaded successfully.');\n          setUploading(false);\n          // Notify the server to reassemble the chunks\n          fetch('http://localhost:5000/reassemble-video', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ filename: file.name }),\n          })\n          .then(response => {\n            if (!response.ok) {\n              throw new Error('Network response was not ok ' + response.statusText);\n            }\n            return response.json().catch(err => {\n              throw new Error('Invalid JSON: ' + err.message);\n            });\n          })\n          .then(data => {\n            console.log('Reassembly successful', data);\n            setCaption('Video reassembled successfully.');\n          })\n          .catch(error => {\n            console.error('Error reassembling video:', error);\n            setCaption('Failed to reassemble video.');\n          });\n        }\n      })\n      .catch(error => {\n        console.error('Error uploading chunk:', error);\n        setCaption('Failed to upload chunks.');\n        setUploading(false);\n      });\n    };\n    console.log(\"Called\");\n    // Start uploading the first chunk\n    setUploading(true);\n    const start = chunkIndex * chunkSize;\n    const end = Math.min(file.size, start + chunkSize);\n    const firstChunk = file.slice(start, end);\n    uploadChunk(firstChunk);\n  }\n\n  return (\n    <div>\n      <h1>Upload Video</h1>\n      <input type=\"file\" accept=\"video/*\" onChange={handleUpload} disabled={uploading} />\n      {uploading && <div>Uploading: {progress.toFixed(2)}%</div>}\n      {caption && <div className=\"caption\">{caption}</div>}\n    </div>\n  );\n}\n\nexport default VideoUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}